#include <stdio.h>
#include <iostream>
#include <fstream>

using namespace std;

typedef unsigned char BYTE;


BYTE Rcon_h[256] = {
		0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};



#define SBOX \
/*    0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F*/ \
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,\
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,\
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,\
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,\
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,\
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,\
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,\
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,\
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,\
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,\
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,\
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 \
/*    0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F*/

const BYTE s_box[256] = { SBOX };

#define INV_S \
/*    0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F*/\
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D \
/*    0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F*/

const BYTE inv_s[256] = {INV_S};

__constant__ BYTE sbox[256];
__constant__ BYTE inv_sbox[256];


__device__ void sub_bytes(BYTE* state) {
    for (int i = 0; i < 16; i++)
    {
        state[i] = sbox[state[i]];
    }
}


__device__ void inv_sub_bytes(BYTE* state) {
    for (int i = 0; i < 16; i++)
    {
        state[i] = inv_sbox[state[i]];
    }
}

__device__ void shift_row(BYTE* state) {
    BYTE out[16];
    
    out[0] = state[0];
    out[1] = state[1];
    out[2] = state[2];
    out[3] = state[3];


    out[4] = state[5];
    out[5] = state[6];
    out[6] = state[7];
    out[7] = state[4];


    out[8] = state[10];
    out[9] = state[11];
    out[10] = state[8];
    out[11] = state[9];


    out[12] = state[15];
    out[13] = state[12];
    out[14] = state[13];
    out[15] = state[14];

    for (int i = 0; i < 16; i++)
    {
        state[i] = out[i];
    }
}


__device__ void inv_shift_row(BYTE* state) {
    BYTE out[16];
    
    out[0] = state[0];
    out[1] = state[1];
    out[2] = state[2];
    out[3] = state[3];


    out[4] = state[7];
    out[5] = state[4];
    out[6] = state[5];
    out[7] = state[6];


    out[8] = state[10];
    out[9] = state[11];
    out[10] = state[8];
    out[11] = state[9];


    out[12] = state[13];
    out[13] = state[14];
    out[14] = state[15];
    out[15] = state[12];

    for (int i = 0; i < 16; i++)
    {
        state[i] = out[i];
    }
}

__device__ void mixColumns(BYTE* state) {
    for (int i = 0; i < 4; i++)
	{
		uint8_t a[4];
		uint8_t b[4];
		uint8_t c;
		uint8_t h;
		for(c=0;c<4;c++) {
			a[c] = state[(4*c+i)];
			h = (uint8_t)((signed char)state[(4*c+i)] >> 7);
			b[c] = state[(4*c+i)] << 1;
			b[c] ^= 0x1B & h;
		}
		state[(i)] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
		state[(4+i)] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
		state[(8+i)] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
		state[(12+i)] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
	}
}


__device__ void inv_mixColumns(BYTE* state) {}

__global__ void run_aes(BYTE* state) {
    
    int idx = threadIdx.x;

    // inv_shift_row(state);

    sub_bytes(state);
    shift_row(state);
    mixColumns(state);
    

    // inv_sub_bytes(state);

}

void checkCudaErr(cudaError_t err) {
    if (err != cudaSuccess) 
    {
        exit(err);
    };
}


void schedule_key(unsigned char *t, int rcon_i){
	/* Rotate the word, to the left, meaning t[0] = t[1], t[1] = t[2], t[2] = t[3], t[3] = t[0] */ 
    unsigned char temp;
    temp = t[0];
    for (int i = 0; i < 3; ++i){
        t[i] = t[i+1];
    }
    t[3] = temp;

    
    for(int i = 0; i < 4; ++i){ //iterate over the word, apply sbox to each byte
    	t[i] = s_box[(t[i])];

    }
    t[0] = t[0] ^ Rcon_h[rcon_i]; //for only the left-most byte, XOR with the rcon value based on the rcon index

}

/* 	Expands the key
	Theory implemented from https://en.wikipedia.org/wiki/Rijndael_key_schedule#The_key_schedule
*/
void expandKey(unsigned char *key, int key_size, unsigned char *expanded_key, int expanded_key_size){
	int rcon_i = 1; //rcon iteration value
	int current_size_of_key = 0; //stores the value of the current key size
	unsigned char t[4] = {0}; //temp variable of size 4 bytes


	for(int i = 0; i < key_size; ++i){ //copy the encryption key as the first 16 bytes in the extended key
		expanded_key[i] = key[i];
		current_size_of_key++;
	}
	while (current_size_of_key < expanded_key_size){ //loop until we meet the desired key size
		for(int i = 0; i < 4; ++i){
			t[i] = expanded_key[(current_size_of_key-4) + i]; //assign the value of the previous 4 bytes to t
		}
		if(current_size_of_key % key_size == 0){ //make sure that we only call core if we are in the intervals of a word
			schedule_key(t, rcon_i); //call the core function
			rcon_i++;
		}
		for(int i = 0; i < 4; ++i){
			//for each byte in the expanded key, store the value of the current expanded key byte - the size of the initial key
			// XOR'd with t
			expanded_key[current_size_of_key] = expanded_key[(current_size_of_key - key_size)] ^ t[i];
			current_size_of_key++;
		}
	}
}


int main() {


    BYTE key[32] = {
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };

    BYTE ek[60];

    expandKey(key, 32 * sizeof(BYTE), ek, 60 * sizeof(BYTE));


    for (int i = 0; i < 60; i++)
    {
        printf("%x\n", ek[i]);
    }

    cout << "key ends here-------------------" << endl;
    



    checkCudaErr(cudaMemcpyToSymbol(sbox, s_box, 256 * sizeof(BYTE), 0, cudaMemcpyHostToDevice));
    checkCudaErr(cudaMemcpyToSymbol(inv_sbox, inv_s,  256 * sizeof(BYTE), 0, cudaMemcpyHostToDevice));



    BYTE* in;
    int n = 16;

    checkCudaErr(cudaMallocManaged(&in, sizeof(BYTE) * n));
    

    fstream plainTextFile("./plaintext.txt");
    char c[16];
    plainTextFile.read(c, 16 * sizeof(char));
    for (int i = 0; i < 16; i++)
    {
        in[i] = c[i];
    }
    

    // BYTE test[] = {
    //     0x19, 0xa0, 0x9a, 0xe9,
    //     0x3d, 0xf4, 0xc6, 0xf8, 
    //     0xe3, 0xe2, 0x8d, 0x48, 
    //     0xbe, 0x2b, 0x2a, 0x08, };

    // for (int i = 0; i < 16; i++)
    // {
    //     in[i] = test[i];
    // }

    // int inc = 0x0;
    // for (int i = 0; i < n; i++)
    // {
    //     in[i] = inc;
    //     inc += 0x1;
    // }
    
    for (int i = 0; i < n; i++)
    {
        printf("result index %d is %x  \n", i, in[i]);
    }

    std::cout << "--------- after aes ------------------" << std::endl;
    

    run_aes<<<1,1>>>(in);

    cudaDeviceSynchronize();

    for (int i = 0; i < n; i++)
    {
        printf("result index %d is %x  \n", i, in[i]);
    }

    std::cout << std::endl;
    

    cudaFree(in);

    cudaDeviceReset();

    return 0;
}